generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex","driverAdapters"]
   
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model Hotel {
  id           String    @id @default(uuid())
  userID       String
  title        String    @db.Text
  desc         String    @db.Text
  img          String
  country      String
  state        String
  city         String
  locationDesc String    @db.Text
  gym          Boolean   @default(false)
  spa          Boolean   @default(false)
  bar          Boolean   @default(false)
  laundary     Boolean   @default(false)
  restaurant   Boolean   @default(false)
  shopping     Boolean   @default(false)
  freeParking  Boolean   @default(false)
  bikeRental   Boolean   @default(false)
  freeWifi     Boolean   @default(false)
  movieNights  Boolean   @default(false)
  swimmingPool Boolean   @default(false)
  coffeeShop   Boolean   @default(false)
  addedAt      DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  rooms        Room[]
  bookings     Booking[]

  // @@fulltext([title]) //for search improvement
}

model Room {
  id             String  @id @default(uuid())
  title          String
  desc           String  @db.Text
  bedCount       Int     @default(0)
  guestCount     Int     @default(0)
  bathRoomCount  Int     @default(0)
  kingBed        Int     @default(0)
  QueenBed       Int     @default(0)
  img            String
  breakfastPrice Int
  roomCost       Int
  roomService    Boolean @default(false)
  TV             Boolean @default(false)
  balcony        Boolean @default(false)
  freeWifi       Boolean @default(false)
  cityView       Boolean @default(false)
  forestView     Boolean @default(false)
  oceanView      Boolean @default(false)
  mountainView   Boolean @default(false)
  airCondition   Boolean @default(false)
  soundProofed   Boolean @default(false)
  hotelId        String
  Hotel          Hotel?  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  Booking        Booking[]

  @@index([hotelId])
}

model Booking {
  id                String   @id @default(uuid())
  userName          String
  userID            String
  userEmail         String
  roomId            String
  hotelId           String
  hotelOwnerID      String
  startDate         DateTime
  endDate           DateTime
  breakfastIncluded Boolean
  currency          String
  totalCost         Int
  paymentStatus     Boolean  @default(false)
  paymentIntentID   String   @unique
  bookedAt          DateTime @default(now())

  Hotel             Hotel?   @relation(fields: [hotelId], references: [id])
  Room              Room?    @relation(fields: [roomId], references: [id])

  @@index([hotelId])
  @@index([roomId])
}
